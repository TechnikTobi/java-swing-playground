name: JPackage

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:

  build_and_publish:

    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
    runs-on: ${{ matrix.os }}
    
    env:
      NativeImageOutput: JavaSwingPlaygroundTest
      AppVersion: 1.0.0
      CopyrightString: Tobias Prisching

    steps:

      - name: Get the source code
        uses: actions/checkout@v3
      
      - name: Setup JDK (Windows only)
        uses: actions/setup-java@v3
        with:
          distribution: 'microsoft'
          java-version: '17'
          java-package: 'jdk'
          cache: 'gradle'
        if: matrix.os == 'windows-latest'
  
  
  
      - name: Build - MacOS
        run: |
          cd SwingTestTwo/
          ./gradlew build
          jpackage \
            --app-version ${{ env.AppVersion }} \
            --input . \
            --dest ${{ matrix.os }}-release \
            --main-jar $(find build -name *.jar) \
            --main-class main.Main \
            --name ${{ env.NativeImageOutput }} \
            --copyright "${{ env.CopyrightString }}" \
            --verbose
        if: matrix.os == 'macos-latest'
        
        
      - name: Build - Windows (Part 1)
        shell: cmd 
        run: |
          cd SwingTestTwo/
          gradlew build
        if: matrix.os == 'windows-latest'
        
      - name: Build - Windows (Part 2)
        shell: cmd 
        run: |
          cd SwingTestTwo/
          jpackage --version
          jpackage ^
           --app-version ${{ env.AppVersion }} ^
           --input . ^
           --dest ./${{ matrix.os }}-release ^
           --main-jar build/libs/*.jar ^
           --main-class main.Main ^
           --name ${{ env.NativeImageOutput }} ^
           --copyright "${{ env.CopyrightString }}" ^
           --verbose
        if: matrix.os == 'windows-latest'
        
        
      - name: Build - Linux
        run: |
          cd SwingTestTwo/
          ./gradlew build
          jpackage \
            --app-version ${{ env.AppVersion }} \
            --input . \
            --dest ${{ matrix.os }}-release \
            --main-jar $(find build -name *.jar) \
            --main-class main.Main \
            --name ${{ env.NativeImageOutput }} \
            --copyright "${{ env.CopyrightString }}" \
            --verbose
        if: matrix.os == 'ubuntu-latest'
          
          
          
      - name: List all
        run: |
          ls -R
      
      
      
      - name: ZIP Artifact (non-windows)
        run: |
          cd SwingTestTwo
          zip -r ${{ matrix.os }}.zip ${{ matrix.os }}-release/
          mv ${{ matrix.os }}.zip ..
        if: matrix.os != 'windows-latest'
          
      - name: ZIP Artifact (windows)
        run: |
          cd SwingTestTwo
          7z a "${{ matrix.os }}.zip" "${{ matrix.os }}-release/"
          mv ${{ matrix.os }}.zip ..
        if: matrix.os == 'windows-latest'
      
      
      - name: Publish Artifact
        uses: actions/upload-artifact@v3
        with:
          retention-days: 1
          name: ${{ matrix.os }}
          path: ${{ matrix.os }}.zip



  release:
    name: "Release"
    needs: build_and_publish
    runs-on: ubuntu-latest
    steps:
    
      - name: Grab all the artifacts from the build stage
        uses: actions/download-artifact@v2
      
      - name: Display fetched artifacts
        run: ls -R
      
      - name: Create Release
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "latest"
          prerelease: false
          title: "Latest (development) Build"
          files: |
            ubuntu-latest/ubuntu-latest.zip
            macos-latest/macos-latest.zip
            windows-latest/windows-latest.zip
